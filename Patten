import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from google.colab import drive
import matplotlib.pyplot as plt


drive.mount('/content/gdrive')
train_data = pd.read_csv("/content/gdrive/MyDrive/BTC_train.csv")

features = ["Open", "High", "Low", "Volume"]
target = "Close"

sequences = 60

def create_sequences(data, sequences):
    X = []
    y = []
    for i in range(sequences, len(data)):
        X.append(data[i-sequences:i, :])
        y.append(data[i, 0])
    X = np.array(X)
    y = np.array(y)
    return X, y

sc = MinMaxScaler()
train_data = train_data.drop(['Date'], axis= 1)
train_data_scaled = sc.fit_transform(train_data)
X_train, y_train = create_sequences(train_data_scaled, sequences)
X_train.shape, y_train.shape

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(units=1))

model.compile(optimizer="adam", loss="mean_squared_error")

model.fit(X_train, y_train, epochs=50, batch_size=32)

test_data = pd.read_csv("/content/gdrive/MyDrive/BTC_test.csv")

test_data_drop = test_data.drop(['Date'], axis=1)
test_data_scaled = sc.fit_transform(test_data_drop)
X_test, y_test = create_sequences(test_data_scaled, sequences)

test_predictions = model.predict(X_test)

predictions = sc.fit_transform(test_data_drop[[target]])

result = sc.inverse_transform(predictions)
print(result.shape)

test_data_copy = test_data.iloc[:len(test_data)].copy()
test_data_copy['Predicted Close'] = result

test_data_copy['Date'] = pd.to_datetime(test_data_copy['Date'])

plt.figure(figsize=(12, 8))
plt.title('Actual vs. Predicted Closing Prices')
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.plot(test_data_copy['Date'], test_data_copy['Close'], label='Actual Close', color='r')
plt.plot(test_data_copy['Date'], test_data_copy['Predicted Close'], label='Predicted Close', color='b', linestyle='--')
plt.legend()
plt.show()

